import torch
import numpy as np
from torch import nn

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ===
input_size = 20
hidden_sizes = [256, 128, 64, 32]
num_classes = 5

# –ù–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –∏–ª–∏ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
telemetry_labels = {
    0: "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º",
    1: "–ü–µ—Ä–µ–≥—Ä–µ–≤ –¥–≤–∏–≥–∞—Ç–µ–ª—è",
    2: "–°–±–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
    3: "–†–∞–∑–≥–µ—Ä–º–µ—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—Å–µ–∫–∞",
    4: "–ê–Ω–æ–º–∞–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ"
}

# === –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –æ–±—É—á–µ–Ω–Ω–æ–π ===
class DeepAeroNet(nn.Module):
    def __init__(self):
        super().__init__()
        self.net = nn.Sequential(
            nn.Linear(input_size, hidden_sizes[0]),
            nn.BatchNorm1d(hidden_sizes[0]),
            nn.LeakyReLU(),
            nn.Dropout(0.2),

            nn.Linear(hidden_sizes[0], hidden_sizes[1]),
            nn.BatchNorm1d(hidden_sizes[1]),
            nn.LeakyReLU(),
            nn.Dropout(0.2),

            nn.Linear(hidden_sizes[1], hidden_sizes[2]),
            nn.BatchNorm1d(hidden_sizes[2]),
            nn.LeakyReLU(),

            nn.Linear(hidden_sizes[2], hidden_sizes[3]),
            nn.LeakyReLU(),

            nn.Linear(hidden_sizes[3], num_classes)
        )

    def forward(self, x):
        return self.net(x)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
model = DeepAeroNet()
model.load_state_dict(torch.load("best_model.pth", map_location=torch.device('cpu')))
model.eval()

# === –ü—Ä–∏–º–µ—Ä —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—à–∏–±–∫–æ–π ===
def generate_test_telemetry():
    # –ú–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    return np.random.uniform(low=-2, high=2, size=input_size)

sample = generate_test_telemetry()
sample_tensor = torch.tensor(sample, dtype=torch.float32).unsqueeze(0)

# === –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ===
with torch.no_grad():
    output = model(sample_tensor)
    predicted_idx = torch.argmax(output).item()
    confidence = torch.softmax(output, dim=1)[0][predicted_idx].item()

# === –†–µ–∑—É–ª—å—Ç–∞—Ç ===
print(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–∂–∏–º: {telemetry_labels[predicted_idx]} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%})")
